// TypeScript interfaces and enumerations for the LaundryLoop backend
// These types mirror the Supabase schema defined in supabase-schema.sql.

export type OrderStatus = 'pending' | 'confirmed' | 'in_progress' | 'completed' | 'cancelled';

/**
 * Zone represents a pickup region and its daily capacity.  Capacity may be
 * adjusted per zone but cannot be negative.  The `id` field is a serial
 * generated by the database.
 */
export interface Zone {
  id: number;
  name: string;
  capacity_per_day: number;
  created_at: string; // ISO timestamp
  updated_at: string; // ISO timestamp
}

/**
 * Order represents a customer's laundry pickup request.  Each order
 * references a zone and may be tied to an authenticated Supabase user.
 * Express and overflow flags indicate pricing modifiers.
 */
export interface Order {
  id: string;
  user_id: string | null;
  zone_id: number;
  pickup_date: string;      // ISO date (YYYY‑MM‑DD)
  pickup_slot?: string | null;
  status: OrderStatus;
  is_express: boolean;
  is_overflow: boolean;
  price_cents: number;
  notes?: string | null;
  created_at: string;       // ISO timestamp
  updated_at: string;       // ISO timestamp
}

/**
 * Ledger entry records a financial transaction associated with an order.
 * Positive amounts represent charges (e.g., order total, bonus pool) and
 * negative amounts represent refunds or adjustments.
 */
export interface LedgerEntry {
  id: string;
  order_id: string;
  amount_cents: number;
  type: string;
  description?: string | null;
  created_at: string;       // ISO timestamp
}

// Composite type used in API responses when computing availability
export interface ZoneAvailability extends Zone {
  date: string;               // date for which availability is computed
  orders_count: number;       // number of orders already scheduled
  available_slots: number;    // remaining capacity (capacity_per_day - orders_count)
}
